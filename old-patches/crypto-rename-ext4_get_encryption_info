---
 fs/ext4/crypto.c        | 15 +++++++++++----
 fs/ext4/crypto_fname.c  | 64 +++++++++++++++++++++++++++++++++++++++++-----------------------
 fs/ext4/crypto_key.c    |  2 +-
 fs/ext4/crypto_policy.c | 43 ++++++++++++++++++++++---------------------
 fs/ext4/dir.c           |  8 ++++++--
 fs/ext4/ext4.h          | 37 ++++++++++++++++++++++---------------
 fs/ext4/file.c          | 12 +++++-------
 fs/ext4/ialloc.c        |  6 +++---
 fs/ext4/namei.c         | 17 +++--------------
 fs/ext4/symlink.c       |  4 ----
 10 files changed, 114 insertions(+), 94 deletions(-)

diff --git a/fs/ext4/crypto.c b/fs/ext4/crypto.c
index c802120..e38908d 100644
--- a/fs/ext4/crypto.c
+++ b/fs/ext4/crypto.c
@@ -98,9 +98,8 @@ struct ext4_crypto_ctx *ext4_get_crypto_ctx(struct inode *inode)
 	struct ext4_crypto_ctx *ctx = NULL;
 	int res = 0;
 	unsigned long flags;
-	struct ext4_crypt_info *ci = EXT4_I(inode)->i_crypt_info;
 
-	if (ci == NULL)
+	if (EXT4_I(inode)->i_crypt_info == NULL)
 		return ERR_PTR(-ENOKEY);
 
 	/*
@@ -264,10 +263,18 @@ static int ext4_page_crypto(struct inode *inode,
 	struct ablkcipher_request *req = NULL;
 	DECLARE_EXT4_COMPLETION_RESULT(ecr);
 	struct scatterlist dst, src;
-	struct ext4_crypt_info *ci = EXT4_I(inode)->i_crypt_info;
-	struct crypto_ablkcipher *tfm = ci->ci_ctfm;
+	struct ext4_crypt_info *ci;
+	struct crypto_ablkcipher *tfm;
 	int res = 0;
 
+	rcu_read_lock();
+	ci = EXT4_I(inode)->i_crypt_info;
+	if (ci == NULL) {
+		rcu_read_unlock();
+		return -ENOKEY;
+	}
+	tfm = ci->ci_ctfm;
+
 	req = ablkcipher_request_alloc(tfm, GFP_NOFS);
 	if (!req) {
 		printk_ratelimited(KERN_ERR
diff --git a/fs/ext4/crypto_fname.c b/fs/ext4/crypto_fname.c
index 2fbef8a..db2d134 100644
--- a/fs/ext4/crypto_fname.c
+++ b/fs/ext4/crypto_fname.c
@@ -61,13 +61,13 @@ static unsigned max_name_len(struct inode *inode)
  * allocate sufficient memory to oname string.
  */
 static int ext4_fname_encrypt(struct inode *inode,
+			      struct ext4_crypt_info *ci,
 			      const struct qstr *iname,
 			      struct ext4_str *oname)
 {
 	u32 ciphertext_len;
 	struct ablkcipher_request *req = NULL;
 	DECLARE_EXT4_COMPLETION_RESULT(ecr);
-	struct ext4_crypt_info *ci = EXT4_I(inode)->i_crypt_info;
 	struct crypto_ablkcipher *tfm = ci->ci_ctfm;
 	int res = 0;
 	char iv[EXT4_CRYPTO_BLOCK_SIZE];
@@ -141,6 +141,7 @@ static int ext4_fname_encrypt(struct inode *inode,
  *	We trust the caller to allocate sufficient memory to oname string.
  */
 static int ext4_fname_decrypt(struct inode *inode,
+			      struct ext4_crypt_info *ci,
 			      const struct ext4_str *iname,
 			      struct ext4_str *oname)
 {
@@ -148,7 +149,6 @@ static int ext4_fname_decrypt(struct inode *inode,
 	struct ablkcipher_request *req = NULL;
 	DECLARE_EXT4_COMPLETION_RESULT(ecr);
 	struct scatterlist src_sg, dst_sg;
-	struct ext4_crypt_info *ci = EXT4_I(inode)->i_crypt_info;
 	struct crypto_ablkcipher *tfm = ci->ci_ctfm;
 	int res = 0;
 	char iv[EXT4_CRYPTO_BLOCK_SIZE];
@@ -261,11 +261,13 @@ u32 ext4_fname_crypto_round_up(u32 size, u32 blksize)
 
 unsigned ext4_fname_encrypted_size(struct inode *inode, u32 ilen)
 {
-	struct ext4_crypt_info *ci = EXT4_I(inode)->i_crypt_info;
+	struct ext4_crypt_info *ci;
 	int padding = 32;
 
-	if (ci)
+	ci = ext4_get_crypt_info_rcu(inode);
+	if (!IS_ERR(ci) && ci)
 		padding = 4 << (ci->ci_flags & EXT4_POLICY_FLAGS_PAD_MASK);
+	rcu_read_unlock();
 	if (ilen < EXT4_CRYPTO_BLOCK_SIZE)
 		ilen = EXT4_CRYPTO_BLOCK_SIZE;
 	return ext4_fname_crypto_round_up(ilen, padding);
@@ -316,6 +318,7 @@ int _ext4_fname_disk_to_usr(struct inode *inode,
 {
 	char buf[24];
 	int ret;
+	struct ext4_crypt_info *ci;
 
 	if (iname->len < 3) {
 		/*Check for . and .. */
@@ -330,8 +333,15 @@ int _ext4_fname_disk_to_usr(struct inode *inode,
 		EXT4_ERROR_INODE(inode, "encrypted inode too small");
 		return -EUCLEAN;
 	}
-	if (EXT4_I(inode)->i_crypt_info)
-		return ext4_fname_decrypt(inode, iname, oname);
+	ci = ext4_get_crypt_info_rcu(inode);
+	if (IS_ERR(ci))
+		return PTR_ERR(ci);
+	if (ci) {
+		int ret = ext4_fname_decrypt(inode, ci, iname, oname);
+
+		rcu_read_unlock();
+		return ret;
+	}
 
 	if (iname->len <= EXT4_FNAME_CRYPTO_DIGEST_SIZE) {
 		ret = digest_encode(iname->name, iname->len, oname->name);
@@ -369,8 +379,7 @@ int ext4_fname_usr_to_disk(struct inode *inode,
 			   const struct qstr *iname,
 			   struct ext4_str *oname)
 {
-	int res;
-	struct ext4_crypt_info *ci = EXT4_I(inode)->i_crypt_info;
+	struct ext4_crypt_info *ci;
 
 	if (iname->len < 3) {
 		/*Check for . and .. */
@@ -382,8 +391,13 @@ int ext4_fname_usr_to_disk(struct inode *inode,
 			return oname->len;
 		}
 	}
+	ci = ext4_get_crypt_info_rcu(inode);
+	if (IS_ERR(ci))
+		return PTR_ERR(ci);
 	if (ci) {
-		res = ext4_fname_encrypt(inode, iname, oname);
+		int res = ext4_fname_encrypt(inode, ci, iname, oname);
+
+		rcu_read_unlock();
 		return res;
 	}
 	/* Without a proper key, a user is not allowed to modify the filenames
@@ -409,24 +423,29 @@ int ext4_fname_setup_filename(struct inode *dir, const struct qstr *iname,
 		fname->disk_name.len = iname->len;
 		return 0;
 	}
-	ret = ext4_get_encryption_info(dir);
+	ret = ext4_fname_crypto_alloc_buffer(dir, iname->len,
+					     &fname->crypto_buf);
 	if (ret)
 		return ret;
-	ci = EXT4_I(dir)->i_crypt_info;
+
+	ci = ext4_get_crypt_info_rcu(dir);
+	if (IS_ERR(ci)) {
+		ret = PTR_ERR(ci);
+		goto errout;
+	}
 	if (ci) {
-		ret = ext4_fname_crypto_alloc_buffer(dir, iname->len,
-						     &fname->crypto_buf);
-		if (ret < 0)
-			return ret;
-		ret = ext4_fname_encrypt(dir, iname, &fname->crypto_buf);
+		ret = ext4_fname_encrypt(dir, ci, iname, &fname->crypto_buf);
+		rcu_read_unlock();
 		if (ret < 0)
 			goto errout;
 		fname->disk_name.name = fname->crypto_buf.name;
 		fname->disk_name.len = fname->crypto_buf.len;
 		return 0;
 	}
-	if (!lookup)
-		return -EACCES;
+	if (!lookup) {
+		ret = -EACCES;
+		goto errout;
+	}
 
 	/* We don't have the key and we are doing a lookup; decode the
 	 * user-supplied name
@@ -434,12 +453,11 @@ int ext4_fname_setup_filename(struct inode *dir, const struct qstr *iname,
 	if (iname->name[0] == '_')
 		bigname = 1;
 	if ((bigname && (iname->len != 33)) ||
-	    (!bigname && (iname->len > 43)))
-		return -ENOENT;
+	    (!bigname && (iname->len > 43))) {
+		ret = -ENOENT;
+		goto errout;
+	}
 
-	fname->crypto_buf.name = kmalloc(32, GFP_KERNEL);
-	if (fname->crypto_buf.name == NULL)
-		return -ENOMEM;
 	ret = digest_decode(iname->name + bigname, iname->len - bigname,
 			    fname->crypto_buf.name);
 	if (ret < 0) {
diff --git a/fs/ext4/crypto_key.c b/fs/ext4/crypto_key.c
index 9a16d1e..d9b4cc0 100644
--- a/fs/ext4/crypto_key.c
+++ b/fs/ext4/crypto_key.c
@@ -111,7 +111,7 @@ void ext4_free_encryption_info(struct inode *inode,
 	ext4_free_crypt_info(ci);
 }
 
-int _ext4_get_encryption_info(struct inode *inode)
+int ext4_setup_encryption_info(struct inode *inode)
 {
 	struct ext4_inode_info *ei = EXT4_I(inode);
 	struct ext4_crypt_info *crypt_info;
diff --git a/fs/ext4/crypto_policy.c b/fs/ext4/crypto_policy.c
index ad05069..2f5743f 100644
--- a/fs/ext4/crypto_policy.c
+++ b/fs/ext4/crypto_policy.c
@@ -159,25 +159,26 @@ int ext4_is_child_context_consistent_with_parent(struct inode *parent,
 	/* if the child directory is not encrypted, this is always a problem */
 	if (!ext4_encrypted_inode(child))
 		return 0;
-	res = ext4_get_encryption_info(parent);
-	if (res)
+	parent_ci = ext4_get_crypt_info_rcu(parent);
+	if (IS_ERR(parent_ci))
 		return 0;
-	res = ext4_get_encryption_info(child);
-	if (res)
+	child_ci = ext4_get_crypt_info_rcu(child);
+	if (IS_ERR(child_ci))
 		return 0;
-	parent_ci = EXT4_I(parent)->i_crypt_info;
-	child_ci = EXT4_I(child)->i_crypt_info;
 	if (!parent_ci && !child_ci)
-		return 1;
-	if (!parent_ci || !child_ci)
-		return 0;
-
-	return (memcmp(parent_ci->ci_master_key,
-		       child_ci->ci_master_key,
-		       EXT4_KEY_DESCRIPTOR_SIZE) == 0 &&
-		(parent_ci->ci_data_mode == child_ci->ci_data_mode) &&
-		(parent_ci->ci_filename_mode == child_ci->ci_filename_mode) &&
-		(parent_ci->ci_flags == child_ci->ci_flags));
+		res = 1;
+	else if (!parent_ci || !child_ci)
+		res = 0;
+	else
+		res = (memcmp(parent_ci->ci_master_key,
+			      child_ci->ci_master_key,
+			      EXT4_KEY_DESCRIPTOR_SIZE) == 0 &&
+		       (parent_ci->ci_data_mode == child_ci->ci_data_mode) &&
+		       (parent_ci->ci_filename_mode ==
+			child_ci->ci_filename_mode) &&
+		       (parent_ci->ci_flags == child_ci->ci_flags));
+	rcu_read_unlock();
+	return res;
 }
 
 /**
@@ -193,10 +194,9 @@ int ext4_inherit_context(struct inode *parent, struct inode *child)
 	struct ext4_crypt_info *ci;
 	int res;
 
-	res = ext4_get_encryption_info(parent);
-	if (res < 0)
-		return res;
-	ci = EXT4_I(parent)->i_crypt_info;
+	ci = ext4_get_crypt_info_rcu(parent);
+	if (IS_ERR(ci))
+		return PTR_ERR(ci);
 	if (ci == NULL)
 		return -ENOKEY;
 
@@ -216,6 +216,7 @@ int ext4_inherit_context(struct inode *parent, struct inode *child)
 		memcpy(ctx.master_key_descriptor, ci->ci_master_key,
 		       EXT4_KEY_DESCRIPTOR_SIZE);
 	}
+	rcu_read_unlock();
 	get_random_bytes(ctx.nonce, EXT4_KEY_DERIVATION_NONCE_SIZE);
 	res = ext4_xattr_set(child, EXT4_XATTR_INDEX_ENCRYPTION,
 			     EXT4_XATTR_NAME_ENCRYPTION_CONTEXT, &ctx,
@@ -223,7 +224,7 @@ int ext4_inherit_context(struct inode *parent, struct inode *child)
 	if (!res) {
 		ext4_set_inode_flag(child, EXT4_INODE_ENCRYPT);
 		ext4_clear_inode_state(child, EXT4_STATE_MAY_INLINE_DATA);
-		res = ext4_get_encryption_info(child);
+		res = ext4_setup_encryption_info(child);
 	}
 	return res;
 }
diff --git a/fs/ext4/dir.c b/fs/ext4/dir.c
index 1d1bca7..f4dba17 100644
--- a/fs/ext4/dir.c
+++ b/fs/ext4/dir.c
@@ -594,8 +594,12 @@ finished:
 
 static int ext4_dir_open(struct inode * inode, struct file * filp)
 {
-	if (ext4_encrypted_inode(inode))
-		return ext4_get_encryption_info(inode) ? -EACCES : 0;
+	if (ext4_encrypted_inode(inode)) {
+		int ret = ext4_setup_encryption_info(inode);
+
+		if (ret && ret != -ENOKEY)
+			return -EACCES;
+	}
 	return 0;
 }
 
diff --git a/fs/ext4/ext4.h b/fs/ext4/ext4.h
index edbe347..16ca80d 100644
--- a/fs/ext4/ext4.h
+++ b/fs/ext4/ext4.h
@@ -2327,39 +2327,46 @@ static inline void ext4_fname_free_filename(struct ext4_filename *fname) { }
 /* crypto_key.c */
 void ext4_free_crypt_info(struct ext4_crypt_info *ci);
 void ext4_free_encryption_info(struct inode *inode, struct ext4_crypt_info *ci);
-int _ext4_get_encryption_info(struct inode *inode);
+int ext4_setup_encryption_info(struct inode *inode);
 
 #ifdef CONFIG_EXT4_FS_ENCRYPTION
 int ext4_has_encryption_key(struct inode *inode);
 
-static inline int ext4_get_encryption_info(struct inode *inode)
+static inline
+struct ext4_crypt_info *ext4_get_crypt_info_rcu(struct inode *inode)
 {
-	struct ext4_crypt_info *ci = EXT4_I(inode)->i_crypt_info;
+	int ret;
+	struct ext4_crypt_info *ci;
 
+	rcu_read_lock();
+	ci = EXT4_I(inode)->i_crypt_info;
 	if (!ci ||
 	    (ci->ci_keyring_key &&
 	     (ci->ci_keyring_key->flags & ((1 << KEY_FLAG_INVALIDATED) |
 					   (1 << KEY_FLAG_REVOKED) |
-					   (1 << KEY_FLAG_DEAD)))))
-		return _ext4_get_encryption_info(inode);
-	return 0;
-}
-
-static inline struct ext4_crypt_info *ext4_encryption_info(struct inode *inode)
-{
-	return EXT4_I(inode)->i_crypt_info;
+					   (1 << KEY_FLAG_DEAD))))) {
+		rcu_read_unlock();
+		ret = ext4_setup_encryption_info(inode);
+		if (ret && ret != -ENOKEY) {
+			return ERR_PTR(ret);
+		}
+		rcu_read_lock();
+	}
+	ci = EXT4_I(inode)->i_crypt_info;
+	if (ci == NULL)
+		rcu_read_unlock();
+	return ci;
 }
-
 #else
 static inline int ext4_has_encryption_key(struct inode *inode)
 {
 	return 0;
 }
-static inline int ext4_get_encryption_info(struct inode *inode)
+static inline int ext4_setup_encryption_info(struct inode *inode)
 {
-	return 0;
+	return -ENOKEY;
 }
-static inline struct ext4_crypt_info *ext4_encryption_info(struct inode *inode)
+struct ext4_crypt_info *ext4_get_crypt_info_rcu(struct inode *inode)
 {
 	return NULL;
 }
diff --git a/fs/ext4/file.c b/fs/ext4/file.c
index 749b222..c977c7a 100644
--- a/fs/ext4/file.c
+++ b/fs/ext4/file.c
@@ -327,11 +327,9 @@ static int ext4_file_mmap(struct file *file, struct vm_area_struct *vma)
 	struct inode *inode = file->f_mapping->host;
 
 	if (ext4_encrypted_inode(inode)) {
-		int err = ext4_get_encryption_info(inode);
+		int err = ext4_setup_encryption_info(inode);
 		if (err)
-			return 0;
-		if (ext4_encryption_info(inode) == NULL)
-			return -ENOKEY;
+			return err;
 	}
 	file_accessed(file);
 	if (IS_DAX(file_inode(file))) {
@@ -385,11 +383,11 @@ static int ext4_file_open(struct inode * inode, struct file * filp)
 		}
 	}
 	if (ext4_encrypted_inode(inode)) {
-		ret = ext4_get_encryption_info(inode);
+		ret = ext4_setup_encryption_info(inode);
+		if (ret == -ENOKEY)
+			return ret;
 		if (ret)
 			return -EACCES;
-		if (ext4_encryption_info(inode) == NULL)
-			return -ENOKEY;
 	}
 	/*
 	 * Set up the jbd2_inode if we are opening the inode for
diff --git a/fs/ext4/ialloc.c b/fs/ext4/ialloc.c
index 3fcfd50..3abf659 100644
--- a/fs/ext4/ialloc.c
+++ b/fs/ext4/ialloc.c
@@ -765,11 +765,11 @@ struct inode *__ext4_new_inode(handle_t *handle, struct inode *dir,
 	if ((ext4_encrypted_inode(dir) ||
 	     DUMMY_ENCRYPTION_ENABLED(EXT4_SB(dir->i_sb))) &&
 	    (S_ISREG(mode) || S_ISDIR(mode) || S_ISLNK(mode))) {
-		err = ext4_get_encryption_info(dir);
+		err = ext4_setup_encryption_info(dir);
+		if (err == -ENOKEY)
+			return ERR_PTR(-EPERM);
 		if (err)
 			return ERR_PTR(err);
-		if (ext4_encryption_info(dir) == NULL)
-			return ERR_PTR(-EPERM);
 		if (!handle)
 			nblocks += EXT4_DATA_TRANS_BLOCKS(dir->i_sb);
 		encrypt = 1;
diff --git a/fs/ext4/namei.c b/fs/ext4/namei.c
index 2047ff7..9992a22 100644
--- a/fs/ext4/namei.c
+++ b/fs/ext4/namei.c
@@ -618,12 +618,6 @@ static struct stats dx_show_leaf(struct inode *dir,
 
 				name  = de->name;
 				len = de->name_len;
-				if (ext4_encrypted_inode(inode))
-					res = ext4_get_encryption_info(dir);
-				if (res) {
-					printk(KERN_WARNING "Error setting up"
-					       " fname crypto: %d\n", res);
-				}
 				if (ctx == NULL) {
 					/* Directory is not encrypted */
 					ext4fs_dirhash(de->name,
@@ -967,11 +961,6 @@ static int htree_dirblock_to_tree(struct file *dir_file,
 #ifdef CONFIG_EXT4_FS_ENCRYPTION
 	/* Check if the directory is encrypted */
 	if (ext4_encrypted_inode(dir)) {
-		err = ext4_get_encryption_info(dir);
-		if (err < 0) {
-			brelse(bh);
-			return err;
-		}
 		err = ext4_fname_crypto_alloc_buffer(dir, EXT4_NAME_LEN,
 						     &fname_crypto_str);
 		if (err < 0) {
@@ -3058,11 +3047,11 @@ static int ext4_symlink(struct inode *dir,
 	encryption_required = (ext4_encrypted_inode(dir) ||
 			       DUMMY_ENCRYPTION_ENABLED(EXT4_SB(dir->i_sb)));
 	if (encryption_required) {
-		err = ext4_get_encryption_info(dir);
+		err = ext4_setup_encryption_info(dir);
+		if (err == -ENOKEY)
+			return -EPERM;
 		if (err)
 			return err;
-		if (ext4_encryption_info(dir) == NULL)
-			return -EPERM;
 		disk_link.len = (ext4_fname_encrypted_size(dir, len) +
 				 sizeof(struct ext4_encrypted_symlink_data));
 		sd = kzalloc(disk_link.len, GFP_KERNEL);
diff --git a/fs/ext4/symlink.c b/fs/ext4/symlink.c
index e8e7af6..a9b5777 100644
--- a/fs/ext4/symlink.c
+++ b/fs/ext4/symlink.c
@@ -34,10 +34,6 @@ static const char *ext4_encrypted_follow_link(struct dentry *dentry, void **cook
 	int res;
 	u32 plen, max_size = inode->i_sb->s_blocksize;
 
-	res = ext4_get_encryption_info(inode);
-	if (res)
-		return ERR_PTR(res);
-
 	if (ext4_inode_is_fast_symlink(inode)) {
 		caddr = (char *) EXT4_I(inode)->i_data;
 		max_size = sizeof(EXT4_I(inode)->i_data);
