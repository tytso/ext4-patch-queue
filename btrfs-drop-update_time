btrfs: add an is_readonly() so btrfs can use common code for update_time()

The only reason btrfs cloned code from the VFS layer was so it could
add a check to see if a subvolume is read-only and so it could return
an error from btrfs_dirty_inode().  This takes care of the first
reason; we'll take care of the second reason in the next commit.

Signed-off-by: Theodore Ts'o <tytso@mit.edu>
Cc: linux-btrfs@vger.kernel.org
Reviewed-by: David Sterba <dsterba@suse.cz>
---
 fs/btrfs/inode.c   | 14 ++++++++++++++
 fs/inode.c         |  7 +++++++
 include/linux/fs.h |  1 +
 3 files changed, 22 insertions(+)

diff --git a/fs/btrfs/inode.c b/fs/btrfs/inode.c
index d23362f..bd46a22 100644
--- a/fs/btrfs/inode.c
+++ b/fs/btrfs/inode.c
@@ -5554,6 +5554,15 @@ static int btrfs_dirty_inode(struct inode *inode)
 	return ret;
 }
 
+static int btrfs_is_readonly(struct inode *inode)
+{
+	struct btrfs_root *root = BTRFS_I(inode)->root;
+
+	if (btrfs_root_readonly(root))
+		return -EROFS;
+	return 0;
+}
+
 /*
  * This is a copy of file_update_time.  We need this so we can return error on
  * ENOSPC for updating the inode in the case of file write and mmap writes.
@@ -9461,6 +9470,7 @@ static const struct inode_operations btrfs_dir_inode_operations = {
 	.permission	= btrfs_permission,
 	.get_acl	= btrfs_get_acl,
 	.set_acl	= btrfs_set_acl,
+	.is_readonly	= btrfs_is_readonly,
 	.update_time	= btrfs_update_time,
 	.tmpfile        = btrfs_tmpfile,
 };
@@ -9469,6 +9479,7 @@ static const struct inode_operations btrfs_dir_ro_inode_operations = {
 	.permission	= btrfs_permission,
 	.get_acl	= btrfs_get_acl,
 	.set_acl	= btrfs_set_acl,
+	.is_readonly	= btrfs_is_readonly,
 	.update_time	= btrfs_update_time,
 };
 
@@ -9539,6 +9550,7 @@ static const struct inode_operations btrfs_file_inode_operations = {
 	.fiemap		= btrfs_fiemap,
 	.get_acl	= btrfs_get_acl,
 	.set_acl	= btrfs_set_acl,
+	.is_readonly	= btrfs_is_readonly,
 	.update_time	= btrfs_update_time,
 };
 static const struct inode_operations btrfs_special_inode_operations = {
@@ -9551,6 +9563,7 @@ static const struct inode_operations btrfs_special_inode_operations = {
 	.removexattr	= btrfs_removexattr,
 	.get_acl	= btrfs_get_acl,
 	.set_acl	= btrfs_set_acl,
+	.is_readonly	= btrfs_is_readonly,
 	.update_time	= btrfs_update_time,
 };
 static const struct inode_operations btrfs_symlink_inode_operations = {
@@ -9564,6 +9577,7 @@ static const struct inode_operations btrfs_symlink_inode_operations = {
 	.getxattr	= btrfs_getxattr,
 	.listxattr	= btrfs_listxattr,
 	.removexattr	= btrfs_removexattr,
+	.is_readonly	= btrfs_is_readonly,
 	.update_time	= btrfs_update_time,
 };
 
diff --git a/fs/inode.c b/fs/inode.c
index 26753ba..53f0173 100644
--- a/fs/inode.c
+++ b/fs/inode.c
@@ -1499,6 +1499,13 @@ static int relatime_need_update(struct vfsmount *mnt, struct inode *inode,
  */
 static int update_time(struct inode *inode, struct timespec *time, int flags)
 {
+ 	int ret;
+
+	if (inode->i_op->is_readonly) {
+		ret = inode->i_op->is_readonly(inode);
+ 		if (ret)
+ 			return ret;
+	}
 	if (inode->i_op->update_time)
 		return inode->i_op->update_time(inode, time, flags);
 
diff --git a/include/linux/fs.h b/include/linux/fs.h
index 9ab779e..f4b0ecd 100644
--- a/include/linux/fs.h
+++ b/include/linux/fs.h
@@ -1544,6 +1544,7 @@ struct inode_operations {
 	int (*removexattr) (struct dentry *, const char *);
 	int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 start,
 		      u64 len);
+	int (*is_readonly)(struct inode *);
 	int (*update_time)(struct inode *, struct timespec *, int);
 	int (*atomic_open)(struct inode *, struct dentry *,
 			   struct file *, unsigned open_flag,
