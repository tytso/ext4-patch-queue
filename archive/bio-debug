ext4: debugging patches for the bio code

---
 block/blk-core.c      |   17 ++++++++++
 fs/buffer.c           |   36 ++++++++++++++++++++++
 fs/ext4/inode.c       |   18 +++++++++++
 fs/ext4/mballoc.c     |    8 ++++-
 fs/ext4/page-io.c     |   80 +++++++++++++++++++++++++++++++++++++++++++++++-
 fs/jbd2/commit.c      |   18 +++++++++++
 fs/jbd2/transaction.c |    5 +++
 mm/filemap.c          |    7 ++++
 8 files changed, 186 insertions(+), 3 deletions(-)

diff --git a/block/blk-core.c b/block/blk-core.c
index 32a1c12..115574b 100644
--- a/block/blk-core.c
+++ b/block/blk-core.c
@@ -248,6 +248,9 @@ int blk_remove_plug(struct request_queue *q)
 	if (!queue_flag_test_and_clear(QUEUE_FLAG_PLUGGED, q))
 		return 0;
 
+#if 1				/* PDEBUG */
+	trace_printk("del timer %s\n", q->backing_dev_info.name);
+#endif
 	del_timer(&q->unplug_timer);
 	return 1;
 }
@@ -379,6 +382,9 @@ EXPORT_SYMBOL(blk_stop_queue);
  */
 void blk_sync_queue(struct request_queue *q)
 {
+#if 1				/* PDEBUG */
+	trace_printk("del timer %s\n", q->backing_dev_info.name);
+#endif
 	del_timer_sync(&q->unplug_timer);
 	del_timer_sync(&q->timeout);
 	cancel_work_sync(&q->unplug_work);
@@ -1525,6 +1531,17 @@ static inline void __generic_make_request(struct bio *bio)
 		trace_block_bio_queue(q, bio);
 
 		ret = q->make_request_fn(q, bio);
+
+#if 1				/* PDEBUG */
+		{
+			char str[KSYM_SYMBOL_LEN];
+
+			kallsyms_lookup((unsigned long) q->make_request_fn,
+					NULL, NULL, NULL, str);
+			trace_printk("returned from %s (pid %d)\n",
+				     str, task_pid_nr(current));
+		}
+#endif
 	} while (ret);
 
 	return;
diff --git a/fs/buffer.c b/fs/buffer.c
index 3e7dca2..ed188f5 100644
--- a/fs/buffer.c
+++ b/fs/buffer.c
@@ -70,6 +70,19 @@ static int sync_buffer(void *word)
 
 void __lock_buffer(struct buffer_head *bh)
 {
+#if 1				/* PDEBUG */
+	void *ip = __builtin_return_address(0);
+	char str[KSYM_SYMBOL_LEN];
+	char b[BDEVNAME_SIZE];
+
+	if (buffer_locked(bh)) {
+		kallsyms_lookup((unsigned long) ip, NULL, NULL, NULL, str);
+		trace_printk("lock bh %s blk %lu, ret_pc %p (%s) pid %d\n",
+			     bdevname(bh->b_bdev, b),
+			     (unsigned long) bh->b_blocknr, ip, str,
+			     task_pid_nr(current));
+	}
+#endif
 	wait_on_bit_lock(&bh->b_state, BH_Lock, sync_buffer,
 							TASK_UNINTERRUPTIBLE);
 }
@@ -90,6 +103,17 @@ EXPORT_SYMBOL(unlock_buffer);
  */
 void __wait_on_buffer(struct buffer_head * bh)
 {
+#if 1				/* PDEBUG */
+	void *ip = __builtin_return_address(0);
+	char str[KSYM_SYMBOL_LEN];
+	char b[BDEVNAME_SIZE];
+
+	kallsyms_lookup((unsigned long) ip, NULL, NULL, NULL, str);
+	trace_printk("dev %s blk %lu, ret_pc %p (%s) pid %d\n",
+		     bdevname(bh->b_bdev, b),
+		     (unsigned long) bh->b_blocknr, ip, str,
+		     task_pid_nr(current));
+#endif
 	wait_on_bit(&bh->b_state, BH_Lock, sync_buffer, TASK_UNINTERRUPTIBLE);
 }
 EXPORT_SYMBOL(__wait_on_buffer);
@@ -2906,6 +2930,18 @@ int submit_bh(int rw, struct buffer_head * bh)
 	struct bio *bio;
 	int ret = 0;
 
+#if 1				/* PDEBUG */
+	void *ip = __builtin_return_address(0);
+	char str[KSYM_SYMBOL_LEN];
+	char b[BDEVNAME_SIZE];
+
+	kallsyms_lookup((unsigned long) ip, NULL, NULL, NULL, str);
+	trace_printk("dev %s blk %lu, ret_pc %p (%s) pid %d\n",
+		     bdevname(bh->b_bdev, b),
+		     (unsigned long) bh->b_blocknr, ip, str,
+		     task_pid_nr(current));
+#endif
+
 	BUG_ON(!buffer_locked(bh));
 	BUG_ON(!buffer_mapped(bh));
 	BUG_ON(!bh->b_end_io);
diff --git a/fs/ext4/inode.c b/fs/ext4/inode.c
index 79fdace..82eafb9 100644
--- a/fs/ext4/inode.c
+++ b/fs/ext4/inode.c
@@ -2029,6 +2029,11 @@ static int mpage_da_submit_io(struct mpage_da_data *mpd,
 	index = mpd->first_page;
 	end = mpd->next_page - 1;
 
+#if 1				/* PDEBUG */
+	trace_printk("%s: ino %lu index %lu end %lu size %lu\n",
+		     inode->i_sb->s_id, inode->i_ino,
+		     index, end, (unsigned long) size);
+#endif
 	pagevec_init(&pvec, 0);
 	while (index <= end) {
 		nr_pages = pagevec_lookup(&pvec, mapping, index, PAGEVEC_SIZE);
@@ -3654,6 +3659,9 @@ int flush_completed_IO(struct inode *inode)
 	if (list_empty(&ei->i_completed_io_list))
 		return ret;
 
+#if 1				/* PDEBUG */
+	trace_printk("%s: ino %lu\n", inode->i_sb->s_id, inode->i_ino);
+#endif
 	dump_completed_IO(inode);
 	spin_lock_irqsave(&ei->i_completed_io_lock, flags);
 	while (!list_empty(&ei->i_completed_io_list)){
@@ -3694,6 +3702,16 @@ static void ext4_end_io_dio(struct kiocb *iocb, loff_t offset,
 	unsigned long flags;
 	struct ext4_inode_info *ei;
 
+#if 1				/* PDEBUG */
+	if (io_end)
+		trace_printk("%s: ino %lu io_end %p size %lu\n",
+			     io_end->inode->i_sb->s_id,
+			     io_end->inode->i_ino, io_end,
+			     (unsigned long) size);
+	else
+		trace_printk("null io_end\n");
+#endif
+
 	/* if not async direct IO or dio with 0 bytes write, just return */
 	if (!io_end || !size)
 		goto out;
diff --git a/fs/ext4/mballoc.c b/fs/ext4/mballoc.c
index d732ef5..d1b68b7 100644
--- a/fs/ext4/mballoc.c
+++ b/fs/ext4/mballoc.c
@@ -861,8 +861,14 @@ static int ext4_mb_init_cache(struct page *page, char *incore)
 	}
 
 	/* wait for I/O completion */
-	for (i = 0; i < groups_per_page && bh[i]; i++)
+	for (i = 0; i < groups_per_page && bh[i]; i++) {
+#if 1				/* PDEBUG */
+		if (buffer_locked(bh[i]))
+			trace_printk("%s: wait on %lu\n", sb->s_id,
+			       (unsigned long) bh[i]->b_blocknr);
+#endif
 		wait_on_buffer(bh[i]);
+	}
 
 	err = -EIO;
 	for (i = 0; i < groups_per_page && bh[i]; i++)
diff --git a/fs/ext4/page-io.c b/fs/ext4/page-io.c
index ccce2c6..c2f42e0 100644
--- a/fs/ext4/page-io.c
+++ b/fs/ext4/page-io.c
@@ -30,6 +30,8 @@
 #include "acl.h"
 #include "ext4_extents.h"
 
+#define PDEBUG
+
 static struct kmem_cache *io_page_cachep, *io_end_cachep;
 
 int __init init_ext4_pageio(void)
@@ -56,6 +58,9 @@ void ext4_free_io_end(ext4_io_end_t *io)
 {
 	int i;
 
+#ifdef PDEBUG
+	trace_printk("%p\n", io);
+#endif
 	BUG_ON(!io);
 	if (io->page)
 		put_page(io->page);
@@ -63,6 +68,11 @@ void ext4_free_io_end(ext4_io_end_t *io)
 		if (--io->pages[i]->p_count == 0) {
 			struct page *page = io->pages[i]->p_page;
 
+#ifdef PDEBUG
+			trace_printk("%s: end_page_writeback for %lu:%lu\n",
+				     io->inode->i_sb->s_id, io->inode->i_ino,
+				     (unsigned long) page->index);
+#endif
 			end_page_writeback(page);
 			put_page(page);
 			kmem_cache_free(io_page_cachep, io->pages[i]);
@@ -121,6 +131,9 @@ static void ext4_end_io_work(struct work_struct *work)
 	int			ret;
 
 	mutex_lock(&inode->i_mutex);
+#ifdef PDEBUG
+	trace_printk("%p\n", io);
+#endif
 	ret = ext4_end_io_nolock(io);
 	if (ret < 0) {
 		mutex_unlock(&inode->i_mutex);
@@ -147,6 +160,9 @@ ext4_io_end_t *ext4_init_io_end(struct inode *inode, gfp_t flags)
 		INIT_WORK(&io->work, ext4_end_io_work);
 		INIT_LIST_HEAD(&io->list);
 	}
+#ifdef PDEBUG
+	trace_printk("%p\n", io);
+#endif
 	return io;
 }
 
@@ -175,6 +191,12 @@ static void ext4_end_bio(struct bio *bio, int error)
 
 	BUG_ON(!io_end);
 	inode = io_end->inode;
+#ifdef PDEBUG
+	trace_printk("%s: enter: ino %lu offset %lu size %ld io_end=%p\n",
+		     inode->i_sb->s_id, inode->i_ino,
+		     (unsigned long) io_end->offset,
+		     (long) io_end->size, io_end);
+#endif
 	bio->bi_private = NULL;
 	bio->bi_end_io = NULL;
 	if (test_bit(BIO_UPTODATE, &bio->bi_flags))
@@ -235,6 +257,12 @@ static void ext4_end_bio(struct bio *bio, int error)
 		if (--io_end->pages[i]->p_count == 0) {
 			struct page *page = io_end->pages[i]->p_page;
 
+#ifdef PDEBUG
+			trace_printk("%s: end_page_writeback for %lu:%lu\n",
+				     io_end->inode->i_sb->s_id,
+				     io_end->inode->i_ino,
+				     (unsigned long) page->index);
+#endif
 			end_page_writeback(page);
 			put_page(page);
 			kmem_cache_free(io_page_cachep, io_end->pages[i]);
@@ -261,12 +289,24 @@ static void ext4_end_bio(struct bio *bio, int error)
 	wq = EXT4_SB(inode->i_sb)->dio_unwritten_wq;
 	/* queue the work to convert unwritten extents to written */
 	queue_work(wq, &io_end->work);
+#ifdef PDEBUG
+	trace_printk("%s: exit: ino %lu\n", inode->i_sb->s_id,
+		     io_end->inode->i_ino);
+#endif
 }
 
 void ext4_io_submit(struct ext4_io_submit *io)
 {
 	struct bio *bio = io->io_bio;
 
+#ifdef PDEBUG
+	if (io->io_end)
+		trace_printk("%s: io submitted io_end %p\n",
+			     io->io_end->inode->i_sb->s_id, io->io_end);
+	else
+		trace_printk("io submitted io_end %p\n",
+			     io->io_end);
+#endif
 	if (bio) {
 		bio_get(io->io_bio);
 		submit_bio(io->io_op, io->io_bio);
@@ -308,10 +348,14 @@ static int io_submit_init(struct ext4_io_submit *io,
 	io->io_op = (wbc->sync_mode == WB_SYNC_ALL ?
 			WRITE_SYNC_PLUG : WRITE);
 	io->io_next_block = bh->b_blocknr;
+#ifdef PDEBUG
+	trace_printk("%s: io_submit_init for ino %lu, nvecs = %d\n",
+		     inode->i_sb->s_id, inode->i_ino, nvecs);
+#endif
 	return 0;
 }
 
-static int io_submit_add_bh(struct ext4_io_submit *io,
+static noinline int io_submit_add_bh(struct ext4_io_submit *io,
 			    struct ext4_io_page *io_page,
 			    struct inode *inode,
 			    struct writeback_control *wbc,
@@ -320,6 +364,14 @@ static int io_submit_add_bh(struct ext4_io_submit *io,
 	ext4_io_end_t *io_end;
 	int ret;
 
+#ifdef PDEBUG
+	trace_printk("%s enter: ino %lu blk %lu %s%s%s%s\n", inode->i_sb->s_id,
+		     inode->i_ino, (unsigned long) bh->b_blocknr,
+		     buffer_new(bh) ? "N" : "",
+		     buffer_mapped(bh) ? "M" : "",
+		     buffer_delay(bh) ? "D" : "",
+		     buffer_dirty(bh) ? "d" : "");
+#endif
 	if (buffer_new(bh)) {
 		clear_buffer_new(bh);
 		unmap_underlying_metadata(bh->b_bdev, bh->b_blocknr);
@@ -351,13 +403,29 @@ submit_and_retry:
 	io->io_end->size += bh->b_size;
 	io->io_next_block++;
 	ret = bio_add_page(io->io_bio, bh->b_page, bh->b_size, bh_offset(bh));
-	if (ret != bh->b_size)
+	if (ret != bh->b_size) {
+#ifdef PDEBUG
+		trace_printk("%s: submit and retry (ret = %d, size=%d, "
+			     "offset=%lu)\n", inode->i_sb->s_id, ret,
+			     bh->b_size, bh_offset(bh));
+#endif
 		goto submit_and_retry;
+	}
 	if ((io_end->num_io_pages == 0) ||
 	    (io_end->pages[io_end->num_io_pages-1] != io_page)) {
 		io_end->pages[io_end->num_io_pages++] = io_page;
 		io_page->p_count++;
 	}
+#ifdef PDEBUG
+	if (io->io_end)
+		trace_printk("%s: exit: ino %lu offset %lu size %ld\n",
+			     inode->i_sb->s_id, inode->i_ino,
+			     (unsigned long) io->io_end->offset,
+			     (unsigned long) io->io_end->size);
+	else
+		trace_printk("%s: exit: ino %lu no_io_end\n",
+			     inode->i_sb->s_id, inode->i_ino);
+#endif
 	return 0;
 }
 
@@ -372,6 +440,10 @@ int ext4_bio_write_page(struct ext4_io_submit *io,
 	struct buffer_head *bh, *head;
 	int ret = 0;
 
+#ifdef PDEBUG
+	trace_printk("%s: enter: ino %lu page %lu len %d\n", inode->i_sb->s_id,
+		     inode->i_ino, page->index, len);
+#endif
 	blocksize = 1 << inode->i_blkbits;
 
 	BUG_ON(PageWriteback(page));
@@ -422,5 +494,9 @@ int ext4_bio_write_page(struct ext4_io_submit *io,
 		end_page_writeback(page);
 		kmem_cache_free(io_page_cachep, io_page);
 	}
+#ifdef PDEBUG
+	trace_printk("%s: exit: for ino %lu\n", inode->i_sb->s_id,
+		     inode->i_ino);
+#endif
 	return ret;
 }
diff --git a/fs/jbd2/commit.c b/fs/jbd2/commit.c
index 6494c81..d3f8634 100644
--- a/fs/jbd2/commit.c
+++ b/fs/jbd2/commit.c
@@ -631,6 +631,10 @@ void jbd2_journal_commit_transaction(journal_t *journal)
 		 * (which is of type BJ_IO)
 		 */
 		JBUFFER_TRACE(jh, "ph3: write metadata");
+#if 1				/* PDEBUG */
+		trace_printk("@635 %s block %llu\n", journal->j_devname,
+			     blocknr);
+#endif
 		flags = jbd2_journal_write_metadata_buffer(commit_transaction,
 						      jh, &new_jh, blocknr);
 		if (flags < 0) {
@@ -693,6 +697,11 @@ start_journal_io:
 				clear_buffer_dirty(bh);
 				set_buffer_uptodate(bh);
 				bh->b_end_io = journal_end_buffer_io_sync;
+#if 1				/* PDEBUG */
+				trace_printk("@700 %s block %llu\n",
+					     journal->j_devname,
+					     bh->b_blocknr);
+#endif
 				submit_bh(write_op, bh);
 			}
 			cond_resched();
@@ -762,6 +771,10 @@ wait_for_iobuf:
 		jh = commit_transaction->t_iobuf_list->b_tprev;
 		bh = jh2bh(jh);
 		if (buffer_locked(bh)) {
+#if 1				/* PDEBUG */
+			trace_printk("jbd wait_on_buffer@765: %lu\n",
+				     (unsigned long) bh->b_blocknr);
+#endif
 			wait_on_buffer(bh);
 			goto wait_for_iobuf;
 		}
@@ -818,6 +831,11 @@ wait_for_iobuf:
 		jh = commit_transaction->t_log_list->b_tprev;
 		bh = jh2bh(jh);
 		if (buffer_locked(bh)) {
+#if 1				/* PDEBUG */
+			trace_printk("%s: jbd wait_on_buffer@823: %lu\n",
+				     journal->j_devname,
+				     (unsigned long) bh->b_blocknr);
+#endif
 			wait_on_buffer(bh);
 			goto wait_for_ctlbuf;
 		}
diff --git a/fs/jbd2/transaction.c b/fs/jbd2/transaction.c
index 6bf0a24..8873caa 100644
--- a/fs/jbd2/transaction.c
+++ b/fs/jbd2/transaction.c
@@ -701,6 +701,11 @@ repeat:
 			for ( ; ; ) {
 				prepare_to_wait(wqh, &wait.wait,
 						TASK_UNINTERRUPTIBLE);
+#if 1				/* PDEBUG */
+				trace_printk("%s: BJ shadow waiting on %lu\n",
+				       journal->j_devname,
+				       (unsigned long) bh->b_blocknr);
+#endif
 				if (jh->b_jlist != BJ_Shadow)
 					break;
 				schedule();
diff --git a/mm/filemap.c b/mm/filemap.c
index 3d4df44..e0c7061 100644
--- a/mm/filemap.c
+++ b/mm/filemap.c
@@ -295,6 +295,13 @@ int filemap_fdatawait_range(struct address_space *mapping, loff_t start_byte,
 			if (page->index > end)
 				continue;
 
+#if 1				/* PDEBUG */
+			if (PageWriteback(page))
+				trace_printk("pid %d waiting on %lu:%lu\n",
+					     task_pid_nr(current),
+					     mapping->host->i_ino,
+					     (unsigned long) page->index);
+#endif
 			wait_on_page_writeback(page);
 			if (PageError(page))
 				ret = -EIO;
