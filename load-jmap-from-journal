jbd2: load jmap from journal

If the lazy journal feature is enabled, instead of replaying the
journal, read the journal into journal map.

Signed-off-by: Theodore Ts'o <tytso@mit.edu>
---
 fs/jbd2/journal.c  |  27 ++++++++--------------
 fs/jbd2/recovery.c | 104 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++--------------------
 2 files changed, 89 insertions(+), 42 deletions(-)

diff --git a/fs/jbd2/journal.c b/fs/jbd2/journal.c
index ab7b9bbc9296..1e4a9475826f 100644
--- a/fs/jbd2/journal.c
+++ b/fs/jbd2/journal.c
@@ -1275,31 +1275,24 @@ static void journal_fail_superblock (journal_t *journal)
 
 /*
  * Given a journal_t structure, initialise the various fields for
- * startup of a new journaling session.  We use this both when creating
- * a journal, and after recovering an old journal to reset it for
- * subsequent use.
+ * startup of a new journaling session.
  */
-
 static int journal_reset(journal_t *journal)
 {
 	journal_superblock_t *sb = journal->j_superblock;
-	unsigned long long first, last;
+	int free;
 
-	first = be32_to_cpu(sb->s_first);
-	last = be32_to_cpu(sb->s_maxlen);
-	if (first + JBD2_MIN_JOURNAL_BLOCKS > last + 1) {
-		printk(KERN_ERR "JBD2: Journal too short (blocks %llu-%llu).\n",
-		       first, last);
+	if (journal->j_first + JBD2_MIN_JOURNAL_BLOCKS > journal->j_last + 1) {
+		printk(KERN_ERR "JBD2: Journal too short (blocks %lu-%lu).\n",
+		       journal->j_first, journal->j_last);
 		journal_fail_superblock(journal);
 		return -EINVAL;
 	}
 
-	journal->j_first = first;
-	journal->j_last = last;
-
-	journal->j_head = first;
-	journal->j_tail = first;
-	journal->j_free = last - first;
+	free = journal->j_tail - journal->j_head;
+	if (free <= 0)
+		free += journal->j_last - journal->j_first;
+	journal->j_free = free;
 
 	journal->j_tail_sequence = journal->j_transaction_sequence;
 	journal->j_commit_sequence = journal->j_transaction_sequence - 1;
@@ -1319,7 +1312,7 @@ static int journal_reset(journal_t *journal)
 			journal->j_tail, journal->j_tail_sequence,
 			journal->j_errno);
 		journal->j_flags |= JBD2_FLUSHED;
-	} else {
+	} else if ((journal->j_flags & JBD2_LAZY) == 0) {
 		/* Lock here to make assertions happy... */
 		mutex_lock(&journal->j_checkpoint_mutex);
 		/*
diff --git a/fs/jbd2/recovery.c b/fs/jbd2/recovery.c
index da100044566c..c96ccd1f257f 100644
--- a/fs/jbd2/recovery.c
+++ b/fs/jbd2/recovery.c
@@ -32,17 +32,18 @@ struct recovery_info
 {
 	tid_t		start_transaction;
 	tid_t		end_transaction;
+	int		head_block;
 
 	int		nr_replays;
 	int		nr_revokes;
 	int		nr_revoke_hits;
 };
 
-enum passtype {PASS_SCAN, PASS_REVOKE, PASS_REPLAY};
+enum passtype {PASS_SCAN, PASS_REVOKE, PASS_REPLAY, PASS_JMAP};
 static int do_one_pass(journal_t *journal,
 				struct recovery_info *info, enum passtype pass);
-static int scan_revoke_records(journal_t *, struct buffer_head *,
-				tid_t, struct recovery_info *);
+static int scan_revoke_records(journal_t *, struct buffer_head *, enum passtype,
+			       tid_t, struct recovery_info *);
 
 #ifdef __KERNEL__
 
@@ -255,11 +256,16 @@ int jbd2_journal_recover(journal_t *journal)
 	sb = journal->j_superblock;
 
 	/*
+	 * Initialize journal's head and tail assuming the recovery
+	 * was successful and we're not doing lazy journalling.
+	 */
+	journal->j_head = journal->j_tail = journal->j_first;
+
+	/*
 	 * The journal superblock's s_start field (the current log head)
 	 * is always zero if, and only if, the journal was cleanly
 	 * unmounted.
 	 */
-
 	if (!sb->s_start) {
 		jbd_debug(1, "No recovery required, last transaction %d\n",
 			  be32_to_cpu(sb->s_sequence));
@@ -267,11 +273,15 @@ int jbd2_journal_recover(journal_t *journal)
 		return 0;
 	}
 
-	err = do_one_pass(journal, &info, PASS_SCAN);
-	if (!err)
-		err = do_one_pass(journal, &info, PASS_REVOKE);
-	if (!err)
-		err = do_one_pass(journal, &info, PASS_REPLAY);
+	if (journal->j_flags & JBD2_LAZY)
+		err = do_one_pass(journal, &info, PASS_JMAP);
+	else {
+		err = do_one_pass(journal, &info, PASS_SCAN);
+		if (!err)
+			err = do_one_pass(journal, &info, PASS_REVOKE);
+		if (!err)
+			err = do_one_pass(journal, &info, PASS_REPLAY);
+	}
 
 	jbd_debug(1, "JBD2: recovery, exit status %d, "
 		  "recovered transactions %u to %u\n",
@@ -279,10 +289,22 @@ int jbd2_journal_recover(journal_t *journal)
 	jbd_debug(1, "JBD2: Replayed %d and revoked %d/%d blocks\n",
 		  info.nr_replays, info.nr_revoke_hits, info.nr_revokes);
 
-	/* Restart the log at the next transaction ID, thus invalidating
-	 * any existing commit records in the log. */
+	/* Restart the log at the next transaction ID */
 	journal->j_transaction_sequence = info.end_transaction;
 
+	/*
+	 * In lazy journalling mode, we need to preserve the existing
+	 * contents of the journal, so set j_head and j_tail
+	 * accordingly.
+	 */
+	if (journal->j_flags & JBD2_LAZY) {
+		if (err)
+			return err;
+		journal->j_head = info.head_block;
+		journal->j_tail = be32_to_cpu(sb->s_start);
+		return 0;
+	}
+
 	jbd2_journal_clear_revoke(journal);
 	err2 = sync_blockdev(journal->j_fs_dev);
 	if (!err)
@@ -431,6 +453,7 @@ static int do_one_pass(journal_t *journal,
 	__u32			crc32_sum = ~0; /* Transactional Checksums */
 	int			descr_csum_size = 0;
 	int			block_error = 0;
+	int			new_txn = 1;
 
 	/*
 	 * First thing is to establish what we expect to find in the log
@@ -443,7 +466,7 @@ static int do_one_pass(journal_t *journal,
 	next_log_block = be32_to_cpu(sb->s_start);
 
 	first_commit_ID = next_commit_ID;
-	if (pass == PASS_SCAN)
+	if (pass == PASS_SCAN || pass == PASS_JMAP)
 		info->start_transaction = first_commit_ID;
 
 	jbd_debug(1, "Starting recovery pass %d\n", pass);
@@ -468,7 +491,7 @@ static int do_one_pass(journal_t *journal,
 		 * check right now that we haven't gone past the end of
 		 * the log. */
 
-		if (pass != PASS_SCAN)
+		if (pass != PASS_SCAN && pass != PASS_JMAP)
 			if (tid_geq(next_commit_ID, info->end_transaction))
 				break;
 
@@ -484,9 +507,6 @@ static int do_one_pass(journal_t *journal,
 		if (err)
 			goto failed;
 
-		next_log_block++;
-		wrap(journal, next_log_block);
-
 		/* What kind of buffer is it?
 		 *
 		 * If it is a descriptor block, check that it has the
@@ -510,6 +530,14 @@ static int do_one_pass(journal_t *journal,
 			break;
 		}
 
+		if ((pass == PASS_JMAP) && new_txn) {
+			jbd2_add_new_transaction_infos(journal, sequence, next_log_block);
+			new_txn = 0;
+		}
+
+		next_log_block++;
+		wrap(journal, next_log_block);
+
 		/* OK, we have a valid descriptor block which matches
 		 * all of the sequence number checks.  What are we going
 		 * to do with it?  That depends on the pass... */
@@ -535,7 +563,7 @@ static int do_one_pass(journal_t *journal,
 			 * in pass REPLAY; if journal_checksums enabled, then
 			 * calculate checksums in PASS_SCAN, otherwise,
 			 * just skip over the blocks it describes. */
-			if (pass != PASS_REPLAY) {
+			if ((pass != PASS_REPLAY) && (pass != PASS_JMAP)) {
 				if (pass == PASS_SCAN &&
 				    jbd2_has_feature_checksum(journal) &&
 				    !info->end_transaction) {
@@ -562,12 +590,28 @@ static int do_one_pass(journal_t *journal,
 			while ((tagp - bh->b_data + tag_bytes)
 			       <= journal->j_blocksize - descr_csum_size) {
 				unsigned long io_block;
+				unsigned long long log_block;
 
 				tag = (journal_block_tag_t *) tagp;
 				flags = be16_to_cpu(tag->t_flags);
 
 				io_block = next_log_block++;
 				wrap(journal, next_log_block);
+				if (pass == PASS_JMAP) {
+					struct blk_mapping map;
+
+					err = jbd2_journal_bmap(journal,
+								io_block,
+								&log_block);
+					if (err)
+						goto failed;
+					map.fsblk = read_tag_block(journal, tag);
+					map.logblk = log_block;
+					err = jbd2_add_mapping(journal, &map);
+					if (err)
+						goto failed;
+					goto skip_write;
+				}
 				err = jread(&obh, journal, io_block);
 				if (err) {
 					/* Recover what we can, but
@@ -753,6 +797,10 @@ static int do_one_pass(journal_t *journal,
 					break;
 				}
 			}
+			if (pass == PASS_JMAP) {
+				jbd2_finish_transaction_infos(journal);
+				new_txn = 1;
+			}
 			brelse(bh);
 			next_commit_ID++;
 			continue;
@@ -760,12 +808,12 @@ static int do_one_pass(journal_t *journal,
 		case JBD2_REVOKE_BLOCK:
 			/* If we aren't in the REVOKE pass, then we can
 			 * just skip over this block. */
-			if (pass != PASS_REVOKE) {
+			if (pass != PASS_REVOKE && pass != PASS_JMAP) {
 				brelse(bh);
 				continue;
 			}
 
-			err = scan_revoke_records(journal, bh,
+			err = scan_revoke_records(journal, bh, pass,
 						  next_commit_ID, info);
 			brelse(bh);
 			if (err)
@@ -788,9 +836,10 @@ static int do_one_pass(journal_t *journal,
 	 * transaction marks the end of the valid log.
 	 */
 
-	if (pass == PASS_SCAN) {
+	if (pass == PASS_SCAN || pass == PASS_JMAP) {
 		if (!info->end_transaction)
 			info->end_transaction = next_commit_ID;
+		info->head_block = next_log_block;
 	} else {
 		/* It's really bad news if different passes end up at
 		 * different places (but possible due to IO errors). */
@@ -813,7 +862,8 @@ static int do_one_pass(journal_t *journal,
 /* Scan a revoke record, marking all blocks mentioned as revoked. */
 
 static int scan_revoke_records(journal_t *journal, struct buffer_head *bh,
-			       tid_t sequence, struct recovery_info *info)
+			       enum passtype pass, tid_t sequence,
+			       struct recovery_info *info)
 {
 	jbd2_journal_revoke_header_t *header;
 	int offset, max;
@@ -839,16 +889,20 @@ static int scan_revoke_records(journal_t *journal, struct buffer_head *bh,
 
 	while (offset + record_len <= max) {
 		unsigned long long blocknr;
-		int err;
 
 		if (record_len == 4)
 			blocknr = be32_to_cpu(* ((__be32 *) (bh->b_data+offset)));
 		else
 			blocknr = be64_to_cpu(* ((__be64 *) (bh->b_data+offset)));
 		offset += record_len;
-		err = jbd2_journal_set_revoke(journal, blocknr, sequence);
-		if (err)
-			return err;
+		if (pass == PASS_JMAP)
+			jbd2_jmap_revoke(journal, blocknr);
+		else {
+			int err = jbd2_journal_set_revoke(journal, blocknr,
+							  sequence);
+			if (err)
+				return err;
+		}
 		++info->nr_revokes;
 	}
 	return 0;
