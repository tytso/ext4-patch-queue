Add indirection to metadata read paths

From: Abutalib Aghayev <agayev@cs.cmu.edu>

Change all metadata block reads to use jmap-aware function that first looks
up the metadata block in the jmap.  If lookup is successful, the function
reads the corresponding log block from the journal and copies it to the
metadata block buffer head.  Otherwise, it reads the metadata block from
the file system, just like standard jmap-unaware function.

Signed-off-by: Abutalib Aghayev <agayev@cs.cmu.edu>
Signed-off-by: Theodore Ts'o <tytso@mit.edu>
---
 fs/ext4/extents.c     |  3 ++-
 fs/ext4/ialloc.c      |  5 ++++-
 fs/ext4/indirect.c    |  3 ++-
 fs/ext4/inode.c       | 20 ++++++++++++++------
 fs/ext4/move_extent.c |  3 ++-
 fs/ext4/resize.c      |  4 +++-
 6 files changed, 27 insertions(+), 11 deletions(-)

diff --git a/fs/ext4/extents.c b/fs/ext4/extents.c
index 97f0fd06728d..47914c6a2556 100644
--- a/fs/ext4/extents.c
+++ b/fs/ext4/extents.c
@@ -517,6 +517,7 @@ __read_extent_tree_block(const char *function, unsigned int line,
 {
 	struct buffer_head		*bh;
 	int				err;
+	journal_t *journal = EXT4_SB(inode->i_sb)->s_journal;
 
 	bh = sb_getblk_gfp(inode->i_sb, pblk, __GFP_MOVABLE | GFP_NOFS);
 	if (unlikely(!bh))
@@ -524,7 +525,7 @@ __read_extent_tree_block(const char *function, unsigned int line,
 
 	if (!bh_uptodate_or_lock(bh)) {
 		trace_ext4_ext_load_extent(inode, pblk, _RET_IP_);
-		err = bh_submit_read(bh);
+		err = jbd2_bh_submit_read(journal, bh, __func__);
 		if (err < 0)
 			goto errout;
 	}
diff --git a/fs/ext4/ialloc.c b/fs/ext4/ialloc.c
index 507bfb3344d4..1c3447629e76 100644
--- a/fs/ext4/ialloc.c
+++ b/fs/ext4/ialloc.c
@@ -14,6 +14,7 @@
 
 #include <linux/time.h>
 #include <linux/fs.h>
+#include <linux/jbd2.h>
 #include <linux/stat.h>
 #include <linux/string.h>
 #include <linux/quotaops.h>
@@ -162,6 +163,7 @@ ext4_read_inode_bitmap(struct super_block *sb, ext4_group_t block_group)
 	struct buffer_head *bh = NULL;
 	ext4_fsblk_t bitmap_blk;
 	int err;
+	journal_t *journal = EXT4_SB(sb)->s_journal;
 
 	desc = ext4_get_group_desc(sb, block_group, NULL);
 	if (!desc)
@@ -216,7 +218,8 @@ ext4_read_inode_bitmap(struct super_block *sb, ext4_group_t block_group)
 	trace_ext4_load_inode_bitmap(sb, block_group);
 	bh->b_end_io = ext4_end_bitmap_read;
 	get_bh(bh);
-	submit_bh(REQ_OP_READ, REQ_META | REQ_PRIO, bh);
+	jbd2_submit_bh(journal, REQ_OP_READ, REQ_META | REQ_PRIO, bh, __func__);
+
 	wait_on_buffer(bh);
 	if (!buffer_uptodate(bh)) {
 		put_bh(bh);
diff --git a/fs/ext4/indirect.c b/fs/ext4/indirect.c
index 7ffa290cbb8e..06a79f5e563e 100644
--- a/fs/ext4/indirect.c
+++ b/fs/ext4/indirect.c
@@ -145,6 +145,7 @@ static Indirect *ext4_get_branch(struct inode *inode, int depth,
 				 Indirect chain[4], int *err)
 {
 	struct super_block *sb = inode->i_sb;
+	journal_t *journal = EXT4_SB(sb)->s_journal;
 	Indirect *p = chain;
 	struct buffer_head *bh;
 	int ret = -EIO;
@@ -162,7 +163,7 @@ static Indirect *ext4_get_branch(struct inode *inode, int depth,
 		}
 
 		if (!bh_uptodate_or_lock(bh)) {
-			if (bh_submit_read(bh) < 0) {
+			if (jbd2_bh_submit_read(journal, bh, __func__) < 0) {
 				put_bh(bh);
 				goto failure;
 			}
diff --git a/fs/ext4/inode.c b/fs/ext4/inode.c
index c774bdc22759..a56e717b39be 100644
--- a/fs/ext4/inode.c
+++ b/fs/ext4/inode.c
@@ -1001,13 +1001,15 @@ struct buffer_head *ext4_bread(handle_t *handle, struct inode *inode,
 			       ext4_lblk_t block, int map_flags)
 {
 	struct buffer_head *bh;
+	journal_t *journal = EXT4_SB(inode->i_sb)->s_journal;
 
 	bh = ext4_getblk(handle, inode, block, map_flags);
 	if (IS_ERR(bh))
 		return bh;
 	if (!bh || buffer_uptodate(bh))
 		return bh;
-	ll_rw_block(REQ_OP_READ, REQ_META | REQ_PRIO, 1, &bh);
+	jbd2_ll_rw_block(journal, REQ_OP_READ, REQ_META | REQ_PRIO, 1, &bh,
+			 __func__);
 	wait_on_buffer(bh);
 	if (buffer_uptodate(bh))
 		return bh;
@@ -1020,6 +1022,7 @@ int ext4_bread_batch(struct inode *inode, ext4_lblk_t block, int bh_count,
 		     bool wait, struct buffer_head **bhs)
 {
 	int i, err;
+	journal_t *journal = EXT4_SB(inode->i_sb)->s_journal;
 
 	for (i = 0; i < bh_count; i++) {
 		bhs[i] = ext4_getblk(NULL, inode, block + i, 0 /* map_flags */);
@@ -1033,8 +1036,9 @@ int ext4_bread_batch(struct inode *inode, ext4_lblk_t block, int bh_count,
 	for (i = 0; i < bh_count; i++)
 		/* Note that NULL bhs[i] is valid because of holes. */
 		if (bhs[i] && !buffer_uptodate(bhs[i]))
-			ll_rw_block(REQ_OP_READ, REQ_META | REQ_PRIO, 1,
-				    &bhs[i]);
+			jbd2_ll_rw_block(journal, REQ_OP_READ,
+					 REQ_META | REQ_PRIO, 1, &bhs[i],
+					 __func__);
 
 	if (!wait)
 		return 0;
@@ -4448,6 +4452,7 @@ static int __ext4_get_inode_loc(struct inode *inode,
 	struct super_block	*sb = inode->i_sb;
 	ext4_fsblk_t		block;
 	int			inodes_per_block, inode_offset;
+	journal_t		*journal = EXT4_SB(sb)->s_journal;
 
 	iloc->bh = NULL;
 	if (!ext4_valid_inum(sb, inode->i_ino))
@@ -4551,8 +4556,10 @@ static int __ext4_get_inode_loc(struct inode *inode,
 			table += num / inodes_per_block;
 			if (end > table)
 				end = table;
-			while (b <= end)
-				sb_breadahead(sb, b++);
+			if (journal) {
+				while (b <= end)
+					jbd2_sb_breadahead(journal, sb, b++);
+			}
 		}
 
 		/*
@@ -4563,7 +4570,8 @@ static int __ext4_get_inode_loc(struct inode *inode,
 		trace_ext4_load_inode(inode);
 		get_bh(bh);
 		bh->b_end_io = end_buffer_read_sync;
-		submit_bh(REQ_OP_READ, REQ_META | REQ_PRIO, bh);
+		jbd2_submit_bh(journal, REQ_OP_READ, REQ_META | REQ_PRIO, bh,
+			       __func__);
 		wait_on_buffer(bh);
 		if (!buffer_uptodate(bh)) {
 			EXT4_ERROR_INODE_BLOCK(inode, block,
diff --git a/fs/ext4/move_extent.c b/fs/ext4/move_extent.c
index 9bb36909ec92..0f6c00d0df17 100644
--- a/fs/ext4/move_extent.c
+++ b/fs/ext4/move_extent.c
@@ -177,6 +177,7 @@ static int
 mext_page_mkuptodate(struct page *page, unsigned from, unsigned to)
 {
 	struct inode *inode = page->mapping->host;
+	journal_t *journal = EXT4_SB(inode->i_sb)->s_journal;
 	sector_t block;
 	struct buffer_head *bh, *head, *arr[MAX_BUF_PER_PAGE];
 	unsigned int blocksize, block_start, block_end;
@@ -225,7 +226,7 @@ mext_page_mkuptodate(struct page *page, unsigned from, unsigned to)
 	for (i = 0; i < nr; i++) {
 		bh = arr[i];
 		if (!bh_uptodate_or_lock(bh)) {
-			err = bh_submit_read(bh);
+			err = jbd2_bh_submit_read(journal, bh, __func__);
 			if (err)
 				return err;
 		}
diff --git a/fs/ext4/resize.c b/fs/ext4/resize.c
index 035cd3f4785e..5c817953053b 100644
--- a/fs/ext4/resize.c
+++ b/fs/ext4/resize.c
@@ -1193,10 +1193,12 @@ static int ext4_add_new_descs(handle_t *handle, struct super_block *sb,
 static struct buffer_head *ext4_get_bitmap(struct super_block *sb, __u64 block)
 {
 	struct buffer_head *bh = sb_getblk(sb, block);
+	journal_t *journal = EXT4_SB(sb)->s_journal;
+
 	if (unlikely(!bh))
 		return NULL;
 	if (!bh_uptodate_or_lock(bh)) {
-		if (bh_submit_read(bh) < 0) {
+		if (jbd2_bh_submit_read(journal, bh, __func__) < 0) {
 			brelse(bh);
 			return NULL;
 		}
