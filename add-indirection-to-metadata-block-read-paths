Add indirection to metadata read paths

From: Abutalib Aghayev <agayev@cs.cmu.edu>

Change all metadata block reads to use jmap-aware function that first looks
up the metadata block in the jmap.  If lookup is successful, the function
reads the corresponding log block from the journal and copies it to the
metadata block buffer head.  Otherwise, it reads the metadata block from
the file system, just like standard jmap-unaware function.

Signed-off-by: Abutalib Aghayev <agayev@cs.cmu.edu>

---
 fs/ext4/extents.c     |  3 ++-
 fs/ext4/ialloc.c      |  5 ++++-
 fs/ext4/indirect.c    |  3 ++-
 fs/ext4/inode.c       | 14 ++++++++++----
 fs/ext4/move_extent.c |  3 ++-
 fs/ext4/namei.c       |  8 +++++---
 fs/ext4/resize.c      |  4 +++-
 fs/jbd2/jmap.c        | 17 ++++++++++-------
 8 files changed, 38 insertions(+), 19 deletions(-)

diff --git a/fs/ext4/extents.c b/fs/ext4/extents.c
index 2a97dff87b96..342e4f0c23db 100644
--- a/fs/ext4/extents.c
+++ b/fs/ext4/extents.c
@@ -517,6 +517,7 @@ __read_extent_tree_block(const char *function, unsigned int line,
 {
 	struct buffer_head		*bh;
 	int				err;
+	journal_t *journal = EXT4_SB(inode->i_sb)->s_journal;
 
 	bh = sb_getblk_gfp(inode->i_sb, pblk, __GFP_MOVABLE | GFP_NOFS);
 	if (unlikely(!bh))
@@ -524,7 +525,7 @@ __read_extent_tree_block(const char *function, unsigned int line,
 
 	if (!bh_uptodate_or_lock(bh)) {
 		trace_ext4_ext_load_extent(inode, pblk, _RET_IP_);
-		err = bh_submit_read(bh);
+		err = jbd2_bh_submit_read(journal, bh, __func__);
 		if (err < 0)
 			goto errout;
 	}
diff --git a/fs/ext4/ialloc.c b/fs/ext4/ialloc.c
index b14bae2598bc..a095b8c1465a 100644
--- a/fs/ext4/ialloc.c
+++ b/fs/ext4/ialloc.c
@@ -14,6 +14,7 @@
 
 #include <linux/time.h>
 #include <linux/fs.h>
+#include <linux/jbd2.h>
 #include <linux/stat.h>
 #include <linux/string.h>
 #include <linux/quotaops.h>
@@ -160,6 +161,7 @@ ext4_read_inode_bitmap(struct super_block *sb, ext4_group_t block_group)
 	struct buffer_head *bh = NULL;
 	ext4_fsblk_t bitmap_blk;
 	int err;
+	journal_t *journal = EXT4_SB(sb)->s_journal;
 
 	desc = ext4_get_group_desc(sb, block_group, NULL);
 	if (!desc)
@@ -214,7 +216,8 @@ ext4_read_inode_bitmap(struct super_block *sb, ext4_group_t block_group)
 	trace_ext4_load_inode_bitmap(sb, block_group);
 	bh->b_end_io = ext4_end_bitmap_read;
 	get_bh(bh);
-	submit_bh(REQ_OP_READ, REQ_META | REQ_PRIO, bh);
+	jbd2_submit_bh(journal, REQ_OP_READ, REQ_META | REQ_PRIO, bh, __func__);
+
 	wait_on_buffer(bh);
 	if (!buffer_uptodate(bh)) {
 		put_bh(bh);
diff --git a/fs/ext4/indirect.c b/fs/ext4/indirect.c
index bc15c2c17633..21531ef4a182 100644
--- a/fs/ext4/indirect.c
+++ b/fs/ext4/indirect.c
@@ -145,6 +145,7 @@ static Indirect *ext4_get_branch(struct inode *inode, int depth,
 				 Indirect chain[4], int *err)
 {
 	struct super_block *sb = inode->i_sb;
+	journal_t *journal = EXT4_SB(sb)->s_journal;
 	Indirect *p = chain;
 	struct buffer_head *bh;
 	int ret = -EIO;
@@ -162,7 +163,7 @@ static Indirect *ext4_get_branch(struct inode *inode, int depth,
 		}
 
 		if (!bh_uptodate_or_lock(bh)) {
-			if (bh_submit_read(bh) < 0) {
+			if (jbd2_bh_submit_read(journal, bh, __func__) < 0) {
 				put_bh(bh);
 				goto failure;
 			}
diff --git a/fs/ext4/inode.c b/fs/ext4/inode.c
index 831d025e59ad..f0a9f206c18f 100644
--- a/fs/ext4/inode.c
+++ b/fs/ext4/inode.c
@@ -995,13 +995,15 @@ struct buffer_head *ext4_bread(handle_t *handle, struct inode *inode,
 			       ext4_lblk_t block, int map_flags)
 {
 	struct buffer_head *bh;
+	journal_t *journal = EXT4_SB(inode->i_sb)->s_journal;
 
 	bh = ext4_getblk(handle, inode, block, map_flags);
 	if (IS_ERR(bh))
 		return bh;
 	if (!bh || buffer_uptodate(bh))
 		return bh;
-	ll_rw_block(REQ_OP_READ, REQ_META | REQ_PRIO, 1, &bh);
+	jbd2_ll_rw_block(journal, REQ_OP_READ, REQ_META | REQ_PRIO, 1, &bh,
+			 __func__);
 	wait_on_buffer(bh);
 	if (buffer_uptodate(bh))
 		return bh;
@@ -4343,6 +4345,7 @@ static int __ext4_get_inode_loc(struct inode *inode,
 	struct super_block	*sb = inode->i_sb;
 	ext4_fsblk_t		block;
 	int			inodes_per_block, inode_offset;
+	journal_t		*journal = EXT4_SB(sb)->s_journal;
 
 	iloc->bh = NULL;
 	if (!ext4_valid_inum(sb, inode->i_ino))
@@ -4446,8 +4449,10 @@ static int __ext4_get_inode_loc(struct inode *inode,
 			table += num / inodes_per_block;
 			if (end > table)
 				end = table;
-			while (b <= end)
-				sb_breadahead(sb, b++);
+			if (journal) {
+				while (b <= end)
+					jbd2_sb_breadahead(journal, sb, b++);
+			}
 		}
 
 		/*
@@ -4458,7 +4463,8 @@ static int __ext4_get_inode_loc(struct inode *inode,
 		trace_ext4_load_inode(inode);
 		get_bh(bh);
 		bh->b_end_io = end_buffer_read_sync;
-		submit_bh(REQ_OP_READ, REQ_META | REQ_PRIO, bh);
+		jbd2_submit_bh(journal, REQ_OP_READ, REQ_META | REQ_PRIO, bh,
+			       __func__);
 		wait_on_buffer(bh);
 		if (!buffer_uptodate(bh)) {
 			EXT4_ERROR_INODE_BLOCK(inode, block,
diff --git a/fs/ext4/move_extent.c b/fs/ext4/move_extent.c
index 6fc14def0c70..b6c25638f5f4 100644
--- a/fs/ext4/move_extent.c
+++ b/fs/ext4/move_extent.c
@@ -177,6 +177,7 @@ static int
 mext_page_mkuptodate(struct page *page, unsigned from, unsigned to)
 {
 	struct inode *inode = page->mapping->host;
+	journal_t *journal = EXT4_SB(inode->i_sb)->s_journal;
 	sector_t block;
 	struct buffer_head *bh, *head, *arr[MAX_BUF_PER_PAGE];
 	unsigned int blocksize, block_start, block_end;
@@ -225,7 +226,7 @@ mext_page_mkuptodate(struct page *page, unsigned from, unsigned to)
 	for (i = 0; i < nr; i++) {
 		bh = arr[i];
 		if (!bh_uptodate_or_lock(bh)) {
-			err = bh_submit_read(bh);
+			err = jbd2_bh_submit_read(journal, bh, __func__);
 			if (err)
 				return err;
 		}
diff --git a/fs/ext4/namei.c b/fs/ext4/namei.c
index 6ad612c576fc..0812a692db0f 100644
--- a/fs/ext4/namei.c
+++ b/fs/ext4/namei.c
@@ -1361,6 +1361,7 @@ static struct buffer_head * ext4_find_entry (struct inode *dir,
 	struct buffer_head *bh_use[NAMEI_RA_SIZE];
 	struct buffer_head *bh, *ret = NULL;
 	ext4_lblk_t start, block, b;
+	journal_t *journal;
 	const u8 *name = d_name->name;
 	int ra_max = 0;		/* Number of bh's in the readahead
 				   buffer, bh_use[] */
@@ -1373,6 +1374,7 @@ static struct buffer_head * ext4_find_entry (struct inode *dir,
 
 	*res_dir = NULL;
 	sb = dir->i_sb;
+	journal = EXT4_SB(sb)->s_journal;
 	namelen = d_name->len;
 	if (namelen > EXT4_NAME_LEN)
 		return NULL;
@@ -1451,9 +1453,9 @@ static struct buffer_head * ext4_find_entry (struct inode *dir,
 				}
 				bh_use[ra_max] = bh;
 				if (bh)
-					ll_rw_block(REQ_OP_READ,
-						    REQ_META | REQ_PRIO,
-						    1, &bh);
+					jbd2_ll_rw_block(journal, REQ_OP_READ,
+							 REQ_META | REQ_PRIO,
+							 1, &bh, __func__);
 			}
 		}
 		if ((bh = bh_use[ra_ptr++]) == NULL)
diff --git a/fs/ext4/resize.c b/fs/ext4/resize.c
index c3ed9021b781..8406bca774c8 100644
--- a/fs/ext4/resize.c
+++ b/fs/ext4/resize.c
@@ -1193,10 +1193,12 @@ static int ext4_add_new_descs(handle_t *handle, struct super_block *sb,
 static struct buffer_head *ext4_get_bitmap(struct super_block *sb, __u64 block)
 {
 	struct buffer_head *bh = sb_getblk(sb, block);
+	journal_t *journal = EXT4_SB(sb)->s_journal;
+
 	if (unlikely(!bh))
 		return NULL;
 	if (!bh_uptodate_or_lock(bh)) {
-		if (bh_submit_read(bh) < 0) {
+		if (jbd2_bh_submit_read(journal, bh, __func__) < 0) {
 			brelse(bh);
 			return NULL;
 		}
