fs: only call sync_filesystem() when remounting read-only

Currently "mount -o remount" always implies an syncfs() on the file
system.  This can cause a problem if a workload calls "mount -o
remount" many, many times while concurrent I/O is happening:

   http://article.gmane.org/gmane.comp.file-systems.ext4/42876

Whether it would ever be sane for a workload to call "mount -o
remount" gazillions of times when they are effectively no-ops, it
seems stupid for a remount to imply an fsync().

It's possible that there is some file system which is relying on the
implied fsync(), but that's arguably broken, since aside for the
remount read-only case, there's nothing that will prevent other writes
from sneaking in between the sync_filesystem() and the call to
sb->s_op->remount_fs().

Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
---
 fs/super.c | 3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)

diff --git a/fs/super.c b/fs/super.c
index 80d5cf2..0fc87ac 100644
--- a/fs/super.c
+++ b/fs/super.c
@@ -717,10 +717,9 @@ int do_remount_sb(struct super_block *sb, int flags, void *data, int force)
 			if (retval)
 				return retval;
 		}
+		sync_filesystem(sb);
 	}
 
-	sync_filesystem(sb);
-
 	if (sb->s_op->remount_fs) {
 		retval = sb->s_op->remount_fs(sb, &flags, data);
 		if (retval) {
