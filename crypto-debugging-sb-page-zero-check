ext4 crypto: Debugging: SB zero check and zero page check

From: Michael Halcrow <mhalcrow@google.com>

---
 fs/ext4/crypto.c  | 14 ++++++++++++++
 fs/ext4/extents.c |  2 ++
 2 files changed, 16 insertions(+)

diff --git a/fs/ext4/crypto.c b/fs/ext4/crypto.c
index ead3111..e16170f 100644
--- a/fs/ext4/crypto.c
+++ b/fs/ext4/crypto.c
@@ -522,6 +522,19 @@ out:
 	return res;
 }
 
+bool __ext4_debug_is_page_zero(struct page *page)
+{
+	char *page_virt = kmap(page);
+	int is_not_zero = 0;
+	int i;
+
+	BUG_ON(!page_virt);
+	for (i = 0; i < PAGE_CACHE_SIZE; ++i)
+		is_not_zero |= page_virt[i];
+	kunmap(page);
+	return !is_not_zero;
+}
+
 /**
  * ext4_decrypt() - Decrypts a page in-place
  * @ctx:  The encryption context.
@@ -538,6 +551,7 @@ int ext4_decrypt(struct ext4_crypto_ctx *ctx, struct page *page)
 	int res = 0;
 
 	BUG_ON(!PageLocked(page));
+	BUG_ON(__ext4_debug_is_page_zero(page));
 	switch (ctx->mode) {
 	case EXT4_ENCRYPTION_MODE_AES_256_XTS:
 		res = ext4_xts_decrypt(ctx, page);
diff --git a/fs/ext4/extents.c b/fs/ext4/extents.c
index 9ab757f..6c74a25 100644
--- a/fs/ext4/extents.c
+++ b/fs/ext4/extents.c
@@ -3099,6 +3099,8 @@ static int ext4_ext_zeroout(struct inode *inode, struct ext4_extent *ex)
 	ee_len    = ext4_ext_get_actual_len(ex);
 	ee_pblock = ext4_ext_pblock(ex);
 
+	printk_ratelimited(KERN_ERR "%s: Calling sb_issue_zeroout(ee_pblock = [%lld], ee_len = [%d])\n", __func__, ee_pblock, ee_len);
+
 	ret = sb_issue_zeroout(inode->i_sb, ee_pblock, ee_len, GFP_NOFS);
 	if (ret > 0)
 		ret = 0;
-- 
2.1.0.rc2.206.gedb03e5


